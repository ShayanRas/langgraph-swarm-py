services:
  tiktok-swarm:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tiktok-swarm-app
    ports:
      - "7000:7000"
    environment:
      # OpenAI Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      
      # Supabase Configuration
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      
      # Token Encryption
      - MS_TOKEN_ENCRYPTION_KEY=${MS_TOKEN_ENCRYPTION_KEY}
      
      # TikTok Stealth Configuration
      - TIKTOK_STEALTH_LEVEL=${TIKTOK_STEALTH_LEVEL:-aggressive}
      - TIKTOK_HEADLESS=${TIKTOK_HEADLESS:-false}
      - TIKTOK_BROWSER=${TIKTOK_BROWSER:-chromium}
      - TIKTOK_RANDOM_BROWSER=${TIKTOK_RANDOM_BROWSER:-true}
      - TIKTOK_MAX_SESSIONS_PER_USER=${TIKTOK_MAX_SESSIONS_PER_USER:-2}
      - TIKTOK_SESSION_TIMEOUT=${TIKTOK_SESSION_TIMEOUT:-300}
      - TIKTOK_PROXY_ENABLED=${TIKTOK_PROXY_ENABLED:-false}
      - TIKTOK_PROXY_URL=${TIKTOK_PROXY_URL}
      
      # Application Configuration
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
      - DOCKER_CONTAINER=true
      - PORT=7000
    volumes:
      # Mount source code for hot reloading in development
      - ./src:/app/src:ro
      # Mount .env file if it exists
      - ./.env:/app/.env:ro
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - swarm-network

  # Optional: Local PostgreSQL for development (comment out if using Supabase cloud)
  postgres:
    image: postgres:15-alpine
    container_name: tiktok-swarm-db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=tiktok_swarm
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - swarm-network
    profiles:
      - dev

networks:
  swarm-network:
    driver: bridge

volumes:
  postgres_data: