[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[project]
name = "langgraph-swarm"
version = "0.0.11"
description = "An implementation of a multi-agent swarm using LangGraph"
authors = [
    {name = "Vadym Barda", email = "19161700+vbarda@users.noreply.github.com "}
]
license = "MIT"
license-files = ["LICENSE"]
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "langgraph>=0.3.5",
    "langchain-core>=0.3.40,<0.4.0"
]

[dependency-groups]
test = [
    "pytest>=8.0.0",
    "ruff>=0.9.4",
    "mypy>=1.8.0",
    "pytest-socket>=0.7.0",
    "types-setuptools>=69.0.0",
]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q -v"
testpaths = [
    "tests",
]
python_files = ["test_*.py"]
python_functions = ["test_*"]

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = [
  "ALL",
]
ignore = [
  "E501", # line-length
  "D100",
  "D104",
  "D213",
]


[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true


[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
    # at least this three should be fine in tests:
    "S101", # asserts allowed in tests...
    "ARG", # Unused function args -> fixtures nevertheless are functionally relevant...
    "FBT", # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    "D104",
    # The below are debateable
    "PLR2004", # Magic value used in comparison, ...
    "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D415", # First line should end with a period, question mark, or exclamation point
    "EM101", # Exception must not use a string literal, assign to variable first
    "EM102", # Exception must not use an f-string literal, assign to variable first
    "TRY003", # Avoid specifying long messages outside the exception class
    "TRY004", # Prefer `TypeError` exception for invalid type
    "RET504", # Unnecessary assignment before return statement
    "SIM117", # Use a single `with` statement instead of nested `with` statements
    "TC002", # Move third-party imports into a type-checking block
    "TC003", # Move standard library imports into a type-checking block
    "ANN001", # Missing type annotation for function argument
    "ANN201", # Missing return type annotation for public function
    "ANN202", # Missing return type annotation for private function
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed
    "PT006", # Wrong type passed to first argument of `pytest.mark.parametrize`
    "PT011", # pytest.raises is too broad, set the `match` parameter
    "PTH118", # `os.path.join()` should be replaced by `Path` with `/` operator
    "S110", # try-except-pass detected, consider logging the exception
    "BLE001", # Do not catch blind exception: `Exception`
    "SLF001", # Private member accessed
    "PERF203", # `try-except` within a loop incurs performance overhead
    "C901", # Function is too complex

]

